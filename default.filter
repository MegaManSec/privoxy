#################################################################################
#
#  File        :  default.filter
#
#  Purpose     :  Rules to process the content of web pages
#
#  Copyright   :  Written by and Copyright (C) 2001-2021 the
#                 Privoxy team. https://www.privoxy.org/
#
#                 This program is free software; you can redistribute it
#                 and/or modify it under the terms of the GNU General
#                 Public License as published by the Free Software
#                 Foundation; either version 2 of the License, or (at
#                 your option) any later version.
#
#                 This program is distributed in the hope that it will
#                 be useful, but WITHOUT ANY WARRANTY; without even the
#                 implied warranty of MERCHANTABILITY or FITNESS FOR A
#                 PARTICULAR PURPOSE.  See the GNU General Public
#                 License for more details.
#
#                 The GNU General Public License should be included with
#                 this file.  If not, you can view it at
#                 http://www.gnu.org/copyleft/gpl.html
#                 or write to the Free Software Foundation, Inc., 59
#                 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#################################################################################
#
# Syntax:
#
# Generally filters start with a line like "FILTER: name description".
# They are then referrable from the actionsfile with +filter{name}
#
# FILTER marks a filter as content filter, other filter
# types are CLIENT-HEADER-FILTER, CLIENT-HEADER-TAGGER,
# SERVER-HEADER-FILTER and SERVER-HEADER-TAGGER.
#
# Inside the filters, write one Perl-Style substitution (job) per line.
# Jobs that precede the first FILTER: line are ignored.
#
# For Details see the pcrs manpage contained in this distribution.
# (and the perlre, perlop and pcre manpages)
#
# Note that you are free to choose the delimiter as you see fit.
#
# Note2: In addition to the Perl options gimsx, the following nonstandard
# options are supported:
#
# 'U' turns the default to ungreedy matching.  Add ? to quantifiers to
#     switch back to greedy.
#
# 'T' (trivial) prevents parsing for backreferences in the substitute.
#     Use if you want to include text like '$&' in your substitute without
#     quoting.
#
# 'D' (Dynamic) allows the use of variables. Supported variables are:
#     $host, $listen-address, $origin (the IP address the request came
#     from), $path and $url.
#
#     Note that '$' is a bad choice as delimiter for dynamic filters as you
#     might end up with unintended variables if you use a variable name
#     directly after the delimiter. Variables will be resolved without
#     escaping anything, therefore you also have to be careful not to chose
#     delimiters that appear in the replacement text. For example '<' should
#     be save, while '?' will sooner or later cause conflicts with $url.
#
#################################################################################


#################################################################################
#
# js-annoyances: Get rid of particularly annoying JavaScript abuse.
#
#################################################################################
FILTER: js-annoyances Get rid of particularly annoying JavaScript abuse.

# Note: Most of these jobs would be safer if restricted to a
# <script> context as in:
#
# s/(<script.*)nasty-item(?=.*<\/script>)/$1replacement/sigU
#
# but that would make them match only the first occurrence of
# nasty-item in each <script>. We need nestable jobs!

# Get rid of Javascript referrer tracking.
# Test page: http://www.javascript-page.com/referrer.html
#
s|(?:\w+\.)+referrer|false.toString()|gisU

# The status bar is for displaying link targets, not pointless blahblah
#
s@([\W]\s*)((?:this|window)\.(?:default)?status)\s*=\s*((['"]).*?\4)@$1$2 =\
 (typeof(this.href) != 'undefined')?($3 + ' URL: ' + this.href):($2)@ig

s/(?:(?:this|window)\.(?:default)?status)\s*=\s*\w*\s*;//ig

# Kill OnUnload popups. Yummy.
# Test: http://www.zdnet.com/zdsubs/yahoo/tree/yfs.html
#
s/(<body\s+[^>]*)onunload/$1never/siU
s|(<script.*)window\.onunload(?=.*</script>)|$1never|sigU

# If we allow window.open, we want normal window features:
# Test: http://www.htmlgoodies.com/beyond/notitle.html
#
s/(open\s*\([^\)]+resizable=)(["']?)(?:no|0)\2/$1$2yes$2/sigU
s/(open\s*\([^\)]+location=)(["']?)(?:no|0)\2/$1$2yes$2/sigU
s/(open\s*\([^\)]+status=)(["']?)(?:no|0)\2/$1$2yes$2/sigU
s/(open\s*\([^\)]+scroll(?:ing|bars)=)(["']?)(?:no|0)\2/$1$2auto$2/sigU
s/(open\s*\([^\)]+menubar=)(["']?)(?:no|0)\2/$1$2yes$2/sigU
s/(open\s*\([^\)]+toolbar=)(["']?)(?:no|0)\2/$1$2yes$2/sigU
s/(open\s*\([^\)]+directories=)(["']?)(?:no|0)\2/$1$2yes$2/sigU
s/(open\s*\([^\)]+fullscreen=)(["']?)(?:yes|1)\2/$1$2no$2/sigU
s/(open\s*\([^\)]+always(?:raised|lowered)=)(["']?)(?:yes|1)\2/$1$2no$2/sigU
s/(open\s*\([^\)]+z-?lock=)(["']?)(?:yes|1)\2/$1$2no$2/sigU
s/(open\s*\([^\)]+hotkeys=)(["']?)(?:yes|1)\2/$1$2no$2/sigU
s/(open\s*\([^\)]+titlebar=)(["']?)(?:no|0)\2/$1$2yes$2/sigU


#################################################################################
#
# js-events: Kill JavaScript event bindings and timers (Radically destructive! Only for extra nasty sites).
#
#################################################################################
FILTER: js-events Kill JavaScript event bindings and timers (Radically destructive! Only for extra nasty sites).

s/(on|event\.)((mouse(over|out|down|up|move))|(un)?load|contextmenu|selectstart)/never/ig
# Not events, but abused on the same type of sites:
s/(alert|confirm)\s*\(/concat(/ig
s/set(timeout|interval)\(/concat(/ig

#################################################################################
#
# html-annoyances: Get rid of particularly annoying HTML abuse.
#
#################################################################################
FILTER: html-annoyances Get rid of particularly annoying HTML abuse.

# New browser windows (if allowed -- see no-popups filter below) should be
# resizeable and have a location and status bar
#
s/(<a\s+href[^>]+resizable=)(['"]?)(?:no|0)\2/$1$2yes$2/igU
s/(<a\s+href[^>]+location=)(['"]?)(?:no|0)\2/$1$2yes$2/igU
s/(<a\s+href[^>]+status=)(['"]?)(?:no|0)\2/$1$2yes$2/igU
s/(<a\s+href[^>]+scrolling=)(['"]?)(?:no|0)\2/$1$2auto$2/igU
s/(<a\s+href[^>]+menubar=)(['"]?)(?:no|0)\2/$1$2yes$2/igU

# The <BLINK> and <MARQUEE> tags were crimes!
#
s-</?(blink|marquee).*>--sigU


#################################################################################
#
# content-cookies: Kill cookies that come in the HTML or JS content.
#
#################################################################################
FILTER: content-cookies Kill cookies that come in the HTML or JS content.

# JS cookies, except those used by antiadbuster.com to detect us:
#
s|(\w+\.)+cookie(?=[ \t\r\n]*=)(?!='aab)|ZappedCookie|ig

# HTML cookies:
#
s|<meta\s+http-equiv=['"]?set-cookie.*>|<!-- ZappedCookie -->|igU

SERVER-HEADER-FILTER: x-httpd-php-to-html Changes the Content-Type header from x-httpd-php to html.

s@^(Content-Type:)\s*html/html@$1 text/html@i

CLIENT-HEADER-TAGGER: referer Tags the request with the complete Referer header.

s@^Referer:.*@$0@i

CLIENT-HEADER-FILTER: privoxy-control Removes X-Privoxy-Control headers.

s@^X-Control:.*@@i

CLIENT-HEADER-FILTER: change-url rewrite url
s@^MKCOL (.*)\sHTTP/1.1@POST $1 HTTP/1.1@i

CLIENT-HEADER-FILTER: change-url-downgrade downgrade to http.
s@^PROPFIND (.*)\sHTTP/1.1@POST http://lol.com:80$1 HTTP/1.1@i

CLIENT-HEADER-FILTER: change-url-downgrade2 downgrade to http.
s@^CONNECT nossl.com(.*)\s@GET http://nossl.com $1@i

SERVER-HEADER-TAGGER: privoxy-controls Creates tags with the content of X-Privoxy-Control headers.
s@^X-Tagger:\s*@@i

CLIENT-BODY-FILTER: overwrite-test-value Overwrites the value of the "test" variable with blafasel
s@(test123=)[^&\s]*@$1blafas8888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888el@g
